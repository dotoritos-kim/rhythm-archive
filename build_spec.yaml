version: 0.1
component: build
timeoutInSeconds: 6000
runAs: root
shell: bash
env:
  variables:
    defaultAppName: 'rhythm-archive'
    defaultContextPath: '/'
  vaultVariables:
  exportedVariables:
    - BUILDRUN_HASH
    - APP_NAME
    - IMAGE_PATH
    - TAG
    - CONTEXT_PATH

inputArtifacts:

outputArtifacts:
  - name: output-image
    type: DOCKER_IMAGE
    location: $IMAGE_PATH:$TAG
  - name: output-oci-oke-deployment
    type: BINARY
    location: k8s/

steps:
  - type: Command
    name: 'Init exportedVariables'
    timeoutInSeconds: 30
    command: |
      APP_NAME=$defaultAppName
      CONTEXT_PATH=$defaultContextPath
      echo $APP_NAME
      echo $CONTEXT_PATH

  - type: Command
    name: 'Install Dependencies'
    timeoutInSeconds: 300
    command: |
      echo "Installing Node.js 22 using nvm on Oracle Linux 7..."
      curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
      export NVM_DIR="$HOME/.nvm"
      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
      [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
      echo "Installing Node.js 22..."
      nvm install 22
      nvm use 22
      nvm alias default 22
      echo "Node.js version: $(node --version)"
      echo "npm version: $(npm --version)"
      echo "Installing Node.js dependencies..."
      npm ci
      npm install -g @nestjs/cli
      npm install -g nestia
      npm install -g ts-patch
      echo "Dependencies installed successfully"

  - type: Command
    name: 'Run Tests'
    timeoutInSeconds: 300
    command: |
      echo "Running application tests..."
      npm run test
      echo "Tests completed successfully"

  - type: Command
    name: 'Build Application'
    timeoutInSeconds: 600
    command: |
      echo "Building NestJS application..."
      npm run build
      echo "Application built successfully"

  - type: Command
    name: 'Generate Swagger Documentation'
    timeoutInSeconds: 120
    command: |
      echo "Generating Swagger documentation..."
      npm run swagger:generate
      echo "Swagger documentation generated successfully"

  - type: Command
    name: 'Define Image Tag - Commit ID'
    timeoutInSeconds: 30
    command: |
      COMMIT_ID=`echo ${OCI_TRIGGER_COMMIT_HASH} | cut -c 1-7`
      BUILDRUN_HASH=`echo ${OCI_BUILD_RUN_ID} | rev | cut -c 1-7`
      [ -z "$COMMIT_ID" ] && TAG=$BUILDRUN_HASH || TAG=$COMMIT_ID

  - type: Command
    name: 'Define Image Path'
    timeoutInSeconds: 30
    command: |
      TENANCY_NAMESPACE=`oci os ns get --query data --raw-output`
      REPO_NAME=$APP_NAME
      IMAGE_PATH=$OCI_RESOURCE_PRINCIPAL_REGION.ocir.io/$TENANCY_NAMESPACE/$REPO_NAME

  - type: Command
    name: 'Build Container Image'
    timeoutInSeconds: 1200
    command: |
      cd ${OCI_PRIMARY_SOURCE_DIR}
      echo "Building Docker image..."
      docker build --pull --rm -t new-generated-image . --build-arg BUILDKIT_INLINE_CACHE=1
      if [ $? -eq 0 ]; then
        echo "Docker build successful"
        docker tag new-generated-image $IMAGE_PATH:$TAG
        docker tag new-generated-image $IMAGE_PATH:latest
        echo "Docker image tagged successfully"
      else
        echo "Docker build failed"
        exit 1
      fi

  - type: Command
    name: 'Push Container Image'
    timeoutInSeconds: 600
    command: |
      docker push $IMAGE_PATH:$TAG
      docker push $IMAGE_PATH:latest
      echo "Container image pushed successfully"

  - type: Command
    name: 'Prepare Kubernetes Manifests'
    timeoutInSeconds: 60
    command: |
      echo "Preparing Kubernetes manifests for artifact repository..."
      sed -i "s|us-ashburn-1.ocir.io/your-tenancy-namespace/rhythm-archive:latest|$IMAGE_PATH:$TAG|g" k8s/deployment.yaml
      echo "Kubernetes manifests prepared successfully"
