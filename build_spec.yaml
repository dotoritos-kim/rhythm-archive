version: 0.1
component: build
timeoutInSeconds: 6000
runAs: root
shell: bash
env:
  variables:
    defaultAppName: 'rhythm-archive'
    defaultContextPath: '/'
  vaultVariables:
  exportedVariables:
    - BUILDRUN_HASH
    - APP_NAME
    - IMAGE_PATH
    - TAG
    - CONTEXT_PATH

inputArtifacts:

outputArtifacts:
  - name: output-image
    type: DOCKER_IMAGE
    location: $IMAGE_PATH:$TAG
  - name: output-oci-oke-deployment
    type: BINARY
    location: k8s/

steps:
  - type: Command
    name: 'Init exportedVariables'
    timeoutInSeconds: 30
    command: |
      APP_NAME=$defaultAppName
      CONTEXT_PATH=$defaultContextPath
      echo $APP_NAME
      echo $CONTEXT_PATH

    - type: Command
    name: 'Install Dependencies'
    timeoutInSeconds: 900
    command: |
      echo "Patching system for Node.js 22 compatibility on Oracle Linux 7..."
      
      # 시스템 업데이트 및 필수 패키지 설치
      yum update -y
      yum install -y epel-release
      yum groupinstall -y "Development Tools"
      yum install -y wget curl git cmake pkgconfig
      
      # Node.js 22 호환성을 위한 시스템 패치
      echo "Patching system for Node.js 22 compatibility..."
      
      # 최신 저장소 추가
      yum install -y centos-release-scl
      yum install -y devtoolset-8-gcc devtoolset-8-gcc-c++
      
      # 환경 변수 설정
      source /opt/rh/devtoolset-8/enable
      export CC=/opt/rh/devtoolset-8/root/usr/bin/gcc
      export CXX=/opt/rh/devtoolset-8/root/usr/bin/g++
      
      # 시스템 라이브러리 업데이트
      yum install -y glibc-devel libstdc++-devel
      
      # Node.js 22 바이너리 직접 다운로드 (시스템 라이브러리 의존성 우회)
      echo "Downloading Node.js 22 binary..."
      cd /tmp
      wget https://nodejs.org/dist/v22.0.0/node-v22.0.0-linux-x64.tar.xz
      tar -xf node-v22.0.0-linux-x64.tar.xz
      mv node-v22.0.0-linux-x64 /opt/nodejs
      
      # PATH 설정
      export PATH="/opt/nodejs/bin:$PATH"
      echo 'export PATH="/opt/nodejs/bin:$PATH"' >> ~/.bashrc
      
      # Node.js 22 바이너리 사용
      echo "Using Node.js 22 binary..."
      
      # Node.js 버전 확인
      echo "Node.js version: $(node --version)"
      echo "npm version: $(npm --version)"
      
      # 프로젝트 디렉토리로 이동
      cd ${OCI_PRIMARY_SOURCE_DIR}
      
      echo "Installing Node.js dependencies..."
      npm ci
      npm install -g @nestjs/cli
      npm install -g nestia
      npm install -g ts-patch
      echo "Dependencies installed successfully"

    - type: Command
    name: 'Run Tests'
    timeoutInSeconds: 300
    command: |
      echo "Running application tests..."
      echo "Current directory: $(pwd)"
      echo "Node.js version: $(node --version)"
      echo "npm version: $(npm --version)"
      npm run test
      echo "Tests completed successfully"

  - type: Command
    name: 'Build Application'
    timeoutInSeconds: 600
    command: |
      echo "Building NestJS application..."
      echo "Current directory: $(pwd)"
      echo "Node.js version: $(node --version)"
      echo "npm version: $(npm --version)"
      echo "Directory contents: $(ls -la)"
      echo "Starting build process..."
      npm run build
      if [ $? -eq 0 ]; then
        echo "Application built successfully"
        echo "Build output directory: $(ls -la dist/ 2>/dev/null || echo 'dist directory not found')"
      else
        echo "Build failed with exit code $?"
        exit 1
      fi

  - type: Command
    name: 'Generate Swagger Documentation'
    timeoutInSeconds: 120
    command: |
      echo "Creating generated directory..."
      mkdir -p generated
      echo "Generated directory created: $(ls -la generated/ 2>/dev/null || echo 'Failed to create generated directory')"
      echo "Generating Swagger documentation..."
      npm run swagger:generate
      if [ $? -eq 0 ]; then
        echo "Swagger documentation generated successfully"
        echo "Generated files: $(ls -la generated/ 2>/dev/null || echo 'No generated files found')"
      else
        echo "Swagger generation failed with exit code $?"
        echo "Creating fallback swagger.json file..."
        echo '{"openapi": "3.0.0", "info": {"title": "Rhythm Archive API", "version": "1.0.0"}}' > generated/swagger.json
        echo "Fallback Swagger file created"
      fi

  - type: Command
    name: 'Define Image Tag - Commit ID'
    timeoutInSeconds: 30
    command: |
      COMMIT_ID=`echo ${OCI_TRIGGER_COMMIT_HASH} | cut -c 1-7`
      BUILDRUN_HASH=`echo ${OCI_BUILD_RUN_ID} | rev | cut -c 1-7`
      [ -z "$COMMIT_ID" ] && TAG=$BUILDRUN_HASH || TAG=$COMMIT_ID

  - type: Command
    name: 'Define Image Path'
    timeoutInSeconds: 30
    command: |
      TENANCY_NAMESPACE=`oci os ns get --query data --raw-output`
      REPO_NAME=$APP_NAME
      IMAGE_PATH=$OCI_RESOURCE_PRINCIPAL_REGION.ocir.io/$TENANCY_NAMESPACE/$REPO_NAME

  - type: Command
    name: 'Build Container Image'
    timeoutInSeconds: 1200
    command: |
      cd ${OCI_PRIMARY_SOURCE_DIR}
      echo "Clearing any cached build context..."
      docker system prune -f
      echo "Checking build context..."
      echo "Current directory: $(pwd)"
      echo "Directory contents: $(ls -la)"
      echo "Prisma directory exists: $(test -d prisma && echo 'Yes' || echo 'No')"
      echo "Prisma directory contents: $(ls -la prisma/ 2>/dev/null || echo 'Prisma directory not found')"
      echo "Dist directory contents: $(ls -la dist/ 2>/dev/null || echo 'dist directory not found')"
      echo "Generated directory contents: $(ls -la generated/ 2>/dev/null || echo 'generated directory not found')"
      echo "Building Docker image..."
      docker build --pull --rm --no-cache -t new-generated-image .
      if [ $? -eq 0 ]; then
        echo "Docker build successful"
        docker tag new-generated-image $IMAGE_PATH:$TAG
        docker tag new-generated-image $IMAGE_PATH:latest
        echo "Docker image tagged successfully"
      else
        echo "Docker build failed"
        exit 1
      fi

  - type: Command
    name: 'Push Container Image'
    timeoutInSeconds: 600
    command: |
      docker push $IMAGE_PATH:$TAG
      docker push $IMAGE_PATH:latest
      echo "Container image pushed successfully"

  - type: Command
    name: 'Prepare Kubernetes Manifests'
    timeoutInSeconds: 60
    command: |
      echo "Preparing Kubernetes manifests for artifact repository..."
      sed -i "s|us-ashburn-1.ocir.io/your-tenancy-namespace/rhythm-archive:latest|$IMAGE_PATH:$TAG|g" k8s/deployment.yaml
      echo "Kubernetes manifests prepared successfully"
